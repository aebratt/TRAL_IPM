

  
    model {
    #-------------------------------------------------
    # integrated population model for the Gough TRAL population
    # - age structured model with 10 age classes 
    # - adult survival based on CMR ringing data
    # - pre breeding census, female-based assuming equal sex ratio & survival
    # - productivity based on all areas incu and chick counts
    # - simplified population process with assumed age at recruiting = 10 (Wanless et al. 2009)
    # - adult breeders skipping when unsuccessful at rate of 22-32%, all successful breeders will skip
    # -------------------------------------------------
    
    #-------------------------------------------------  
    # 1. PRIORS FOR ALL DATA SETS
    #-------------------------------------------------
    
    
    # -------------------------------------------------        
    # 1.1. Priors and constraints FOR FECUNDITY
    # -------------------------------------------------
    
    for (t in 1:T){  
      ann.fec[t] ~ dnorm(0.32,10) T(0,1)        ## Informative Priors on fecundity based on Wanless et al 2009
      skip.prob[t] ~ dunif(0.22,0.32)            ## PRIOR FOR ADULT FAILED BREEDER SKIPPING PROBABILITY from Wanless et al 2009
    } #t

    
    # -------------------------------------------------        
    # 1.2. Priors and constraints FOR POPULATION COUNTS
    # -------------------------------------------------
    mean.lambda ~ dunif(0.1,2)	#Prior for mean growth rate
    sigma.proc ~ dunif(0,5)	#Prior for SD of state process (annual variation in pop size)
    tau.proc<-pow(sigma.proc,-2)

    for (s in 1:n.sites){			### start loop over every study area
      N.est[1,s] ~ dunif(0,2000)   ## draw random value from a uniform distribution between 0 and max value of the site for initial population size

      for (t in 1:T){			### start loop over every year
        sigma.obs[t,s] ~ dunif(0,5)	#Prior for SD of observation process (variation in count accuracy)
        tau.obs[t,s]<-pow(sigma.obs[t,s],-2)
      } ## end time loops
    }   ## end study site loop



    # -------------------------------------------------        
    # 1.3. Priors and constraints FOR SURVIVAL
    # -------------------------------------------------
    
    ### RECAPTURE PROBABILITY
    mean.p ~ dunif(0, 1)                          # Prior for mean recapture
    logit.p <- log(mean.p / (1-mean.p))           # Logit transformation
    
    for (t in 1:T){
      logit(p[t]) <- logit.p  + capt.raneff[t]
      capt.raneff[t] ~ dnorm(0, tau.capt)
    }
    
    ### SURVIVAL PROBABILITY
    for (i in 1:nind){
      for (t in f[i]:(T-1)){
        logit(phi[i,t]) <- mu[AGEMAT[i,t]] + surv.raneff[t]       ###+ bycatch*longline[t]
      } #t
    } #i
    
    
    ## AGE-SPECIFIC SURVIVAL 
    for (age in 1:2){
      beta[age] ~ dunif(0.5, 1)                         # Priors for age-specific survival
      mu[age] <- log(beta[age] / (1-beta[age]))       # Logit transformation
    }
    
    ## RANDOM TIME EFFECT ON SURVIVAL 
    for (t in 1:(T-1)){
      surv.raneff[t] ~ dnorm(0, tau.surv)
    }
    
    ### PRIORS FOR RANDOM EFFECTS
    sigma.surv ~ dunif(0, 3)                     # Prior for standard deviation of survival
    tau.surv <- pow(sigma.surv, -2)
    
    sigma.capt ~ dunif(0, 3)                     # Prior for standard deviation of capture
    tau.capt <- pow(sigma.capt, -2)
    
    

    #-------------------------------------------------  
    # 2. LIKELIHOODS AND ECOLOGICAL STATE MODEL
    #-------------------------------------------------
    
    # -------------------------------------------------        
    # 2.1. System process: female based matrix model
    # -------------------------------------------------
    
    for (tt in 2:T){
    
      ## THE PRE-BREEDING YEARS ##
    
      nestlings[tt] <- ann.fec[tt] * 0.5 * Ntot.breed[tt]                                                     ### number of locally produced FEMALE chicks
      JUV[tt] ~ dpois(nestlings[tt])                                                                     ### need a discrete number otherwise dbin will fail, dpois must be >0
      N1[tt]  ~ dbin(ann.surv[1,tt-1], round(JUV[tt-1]))                                                    ### number of 1-year old survivors 
      N2[tt] ~ dbin(ann.surv[1,tt-1], round(N1[tt-1]))                                                      ### number of 2-year old survivors
      N3[tt] ~ dbin(ann.surv[1,tt-1], round(N2[tt-1]))                                                       ### number of 3-year old survivors
      N4[tt] ~ dbin(ann.surv[1,tt-1], round(N3[tt-1]))                                                       ### number of 4-year old survivors
      N5[tt] ~ dbin(ann.surv[1,tt-1], round(N4[tt-1]))                                                       ### number of 5-year old survivors
      N6[tt] ~ dbin(ann.surv[2,tt-1], round(N5[tt-1]))                                                       ### number of 6-year old survivors
      N7[tt] ~ dbin(ann.surv[2,tt-1], round(N6[tt-1]))                                                       ### number of 7-year old survivors
      N8[tt] ~ dbin(ann.surv[2,tt-1], round(N7[tt-1]))                                                       ### number of 8-year old survivors
      N9[tt] ~ dbin(ann.surv[2,tt-1], round(N8[tt-1]))                                                       ### number of 9-year old survivors
    

      ## THE BREEDING POPULATION ##

      #Ntot.breed[tt] ~ dpois(pop.size[tt])                           ### the annual number of breeding birds is the estimate from the count SSM
      #sum(N.est[t,1:n.sites]) ~ dpois(Ntot.breed[tt])                                           ### the annual number of breeding birds is the estimate from the count SSM
      
      # Ntot.breed comprised of first-time breeders, previous skippers, and previous unsuccessful breeders
      N.succ.breed[tt] ~ dbin(ann.fec[tt], round(Ntot.breed[tt]))                     ### number of successful breeders not breeding the following year
      N.unsucc.breed[tt] <- round(Ntot.breed[tt]-N.succ.breed[tt])
      N.fail.skip[tt] ~ dbin(skip.prob[tt], max(1,N.unsucc.breed[tt]))   ### number of unsuccessful breeders not breeding the following year
      N.nonbreed[tt] <- round(sum(N.succ.breed[tt-1],N.fail.skip[tt-1]))
      N.non.breed[tt] ~ dbin(ann.surv[2,tt-1], N.nonbreed[tt])  ### number of non-breeders in a given year is composed of the successful skippers and failed skippers from previous year       

      N.breed.ready[tt]<- round((Ntot.breed[tt-1]-N.succ.breed[tt-1]-N.fail.skip[tt-1])+N9[tt-1]+N.non.breed[tt-1])       ### number of available breeders is failed breeders from previous year plus non-breeders from previous year plus recruits (N9)
      #Ntot.breed[tt] ~ dbin(ann.surv[2,tt-1], N.breed.ready[tt])   ### number of potential old breeders is the number of survivors from previous year breeders and nonbreeders
      N.pot.breed[tt] ~ dbin(ann.surv[2,tt-1], N.breed.ready[tt])   ### number of potential old breeders is the number of survivors from previous year breeders and nonbreeders
      
 
    } # tt
    
    
    
    ### INITIAL VALUES FOR COMPONENTS FOR YEAR 1 - based on deterministic 
    Ntot.breed[1] ~ dunif(2000,3000)   #### starting population around 2500 birds in 2001
    JUV[1]<-round(Ntot.breed[1]*0.5*ann.fec[1])
    N1[1]<-round(JUV[1]*beta[1])
    N2[1]<-round(N1[1]*beta[1])
    N3[1]<-round(N2[1]*beta[1])
    N4[1]<-round(N3[1]*beta[1])
    N5[1]<-round(N4[1]*beta[1])
    N6[1]<-round(N5[1]*beta[2])
    N7[1]<-round(N6[1]*beta[2])
    N8[1]<-round(N7[1]*beta[2])
    N9[1]<-round(N8[1]*beta[2])
    N.nonbreed[1]<-round(sum(N.succ.breed[1],N.fail.skip[1]))
    N.non.breed[1]~ dbin(beta[2], N.nonbreed[1])
    N.succ.breed[1]<- round(Ntot.breed[1]*ann.fec[1])
    N.unsucc.breed[1] <- (Ntot.breed[1]-N.succ.breed[1])
    N.fail.skip[1]<- round(N.unsucc.breed[1]*skip.prob[1])

    
    # -------------------------------------------------        
    # 2.2. Observation process for population counts: state-space model of annual counts
    # -------------------------------------------------
    
    for (t in 2:T){
        
      lambda[t-1] ~ dnorm(mean.lambda, tau.proc)								# Distribution for random error of growth rate
    
        for (s in 1:n.sites){			### start loop over every study area
    
          ## State process for entire time series
    
          N.est[t,s]<-N.est[t-1,s]*lambda[t-1]										        # Linear predictor (population size based on past pop size and change rate)

    
          ## Observation process

          R[t,s] ~ dnorm(N.est[t,s], tau.obs[t,s])								# Distribution for random error in observed numbers (counts)
        }														# end site loop

      ## DERIVED POPULATION SIZE PER YEAR 
      Ntot.breed[t]<-sum(N.est[t,1:n.sites])          

    }		## end year loop
    
    
    
    # -------------------------------------------------        
    # 2.3. Likelihood for fecundity: Poisson regression from the number of surveyed broods
    # -------------------------------------------------
    for (s in 1:n.sites){			### start loop over every study area
      for (t in 1:(T-1)){
        J[t,s] ~ dpois(rho.fec[t,s])
        rho.fec[t,s] <- R[t,s]*ann.fec[t]
      } #	close loop over every year in which we have fecundity data
    }		## end site loop
    
    
    
    
    # -------------------------------------------------        
    # 2.4. Likelihood for adult and juvenile survival from CMR
    # -------------------------------------------------
    
    # Likelihood 
    for (i in 1:nind){

      # Define latent state at first capture
      z[i,f[i]] <- 1

      for (t in (f[i]+1):T){
    
        # State process
        z[i,t] ~ dbern(mu1[i,t])
        mu1[i,t] <- phi[i,t-1] * z[i,t-1]
    
        # Observation process
        y[i,t] ~ dbern(mu2[i,t])
        mu2[i,t] <- p[t] * z[i,t]
      } #t
    } #i
    
    
    
    
    #-------------------------------------------------  
    # 3. DERIVED PARAMETERS FOR OUTPUT REPORTING
    #-------------------------------------------------
    
    ## DERIVED SURVIVAL PROBABILITIES PER YEAR 
    for (t in 1:(T-1)){
      for (age in 1:2){
        logit(ann.surv[age,t]) <- mu[age] + surv.raneff[t]
      }
    }
    
    
    ## DERIVED MEAN FECUNDITY 
    mean.fec <- mean(ann.fec)

    }
    
    
    
    
